<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.edu.cqu.kb.dao.JRuleMapper" >
  <resultMap id="BaseResultMap" type="cn.edu.cqu.kb.model.JRule" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="chessId" property="chessid" jdbcType="INTEGER" />
    <result column="inBlackHome_X" property="inblackhomeX" jdbcType="INTEGER" />
    <result column="inBlackHome_Y" property="inblackhomeY" jdbcType="INTEGER" />
    <result column="inRedHome_X" property="inredhomeX" jdbcType="INTEGER" />
    <result column="inRedHome_Y" property="inredhomeY" jdbcType="INTEGER" />
    <result column="moveTo_X" property="movetoX" jdbcType="INTEGER" />
    <result column="moveTo_Y" property="movetoY" jdbcType="INTEGER" />
    <result column="notExistBlack_X" property="notexistblackX" jdbcType="INTEGER" />
    <result column="notExistBlack_Y" property="notexistblackY" jdbcType="INTEGER" />
    <result column="notExistRed_X" property="notexistredX" jdbcType="INTEGER" />
    <result column="notExistRed_Y" property="notexistredY" jdbcType="INTEGER" />
    <result column="notFaceToFace_X" property="notfacetofaceX" jdbcType="INTEGER" />
    <result column="notFaceToFace_Y" property="notfacetofaceY" jdbcType="INTEGER" />
    <result column="faceToFace" property="facetoface" jdbcType="BIT" />
    <result column="eatAnother" property="eatanother" jdbcType="BIT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, chessId, inBlackHome_X, inBlackHome_Y, inRedHome_X, inRedHome_Y, moveTo_X, moveTo_Y, 
    notExistBlack_X, notExistBlack_Y, notExistRed_X, notExistRed_Y, notFaceToFace_X, 
    notFaceToFace_Y, faceToFace, eatAnother
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.edu.cqu.kb.model.JRuleExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from jrule
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from jrule
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from jrule
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.edu.cqu.kb.model.JRule" >
    insert into jrule (id, chessId, inBlackHome_X, 
      inBlackHome_Y, inRedHome_X, inRedHome_Y, 
      moveTo_X, moveTo_Y, notExistBlack_X, 
      notExistBlack_Y, notExistRed_X, notExistRed_Y, 
      notFaceToFace_X, notFaceToFace_Y, faceToFace, 
      eatAnother)
    values (#{id,jdbcType=INTEGER}, #{chessid,jdbcType=INTEGER}, #{inblackhomeX,jdbcType=INTEGER}, 
      #{inblackhomeY,jdbcType=INTEGER}, #{inredhomeX,jdbcType=INTEGER}, #{inredhomeY,jdbcType=INTEGER}, 
      #{movetoX,jdbcType=INTEGER}, #{movetoY,jdbcType=INTEGER}, #{notexistblackX,jdbcType=INTEGER}, 
      #{notexistblackY,jdbcType=INTEGER}, #{notexistredX,jdbcType=INTEGER}, #{notexistredY,jdbcType=INTEGER}, 
      #{notfacetofaceX,jdbcType=INTEGER}, #{notfacetofaceY,jdbcType=INTEGER}, #{facetoface,jdbcType=BIT}, 
      #{eatanother,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="cn.edu.cqu.kb.model.JRule" >
    insert into jrule
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="chessid != null" >
        chessId,
      </if>
      <if test="inblackhomeX != null" >
        inBlackHome_X,
      </if>
      <if test="inblackhomeY != null" >
        inBlackHome_Y,
      </if>
      <if test="inredhomeX != null" >
        inRedHome_X,
      </if>
      <if test="inredhomeY != null" >
        inRedHome_Y,
      </if>
      <if test="movetoX != null" >
        moveTo_X,
      </if>
      <if test="movetoY != null" >
        moveTo_Y,
      </if>
      <if test="notexistblackX != null" >
        notExistBlack_X,
      </if>
      <if test="notexistblackY != null" >
        notExistBlack_Y,
      </if>
      <if test="notexistredX != null" >
        notExistRed_X,
      </if>
      <if test="notexistredY != null" >
        notExistRed_Y,
      </if>
      <if test="notfacetofaceX != null" >
        notFaceToFace_X,
      </if>
      <if test="notfacetofaceY != null" >
        notFaceToFace_Y,
      </if>
      <if test="facetoface != null" >
        faceToFace,
      </if>
      <if test="eatanother != null" >
        eatAnother,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="chessid != null" >
        #{chessid,jdbcType=INTEGER},
      </if>
      <if test="inblackhomeX != null" >
        #{inblackhomeX,jdbcType=INTEGER},
      </if>
      <if test="inblackhomeY != null" >
        #{inblackhomeY,jdbcType=INTEGER},
      </if>
      <if test="inredhomeX != null" >
        #{inredhomeX,jdbcType=INTEGER},
      </if>
      <if test="inredhomeY != null" >
        #{inredhomeY,jdbcType=INTEGER},
      </if>
      <if test="movetoX != null" >
        #{movetoX,jdbcType=INTEGER},
      </if>
      <if test="movetoY != null" >
        #{movetoY,jdbcType=INTEGER},
      </if>
      <if test="notexistblackX != null" >
        #{notexistblackX,jdbcType=INTEGER},
      </if>
      <if test="notexistblackY != null" >
        #{notexistblackY,jdbcType=INTEGER},
      </if>
      <if test="notexistredX != null" >
        #{notexistredX,jdbcType=INTEGER},
      </if>
      <if test="notexistredY != null" >
        #{notexistredY,jdbcType=INTEGER},
      </if>
      <if test="notfacetofaceX != null" >
        #{notfacetofaceX,jdbcType=INTEGER},
      </if>
      <if test="notfacetofaceY != null" >
        #{notfacetofaceY,jdbcType=INTEGER},
      </if>
      <if test="facetoface != null" >
        #{facetoface,jdbcType=BIT},
      </if>
      <if test="eatanother != null" >
        #{eatanother,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.edu.cqu.kb.model.JRule" >
    update jrule
    <set >
      <if test="chessid != null" >
        chessId = #{chessid,jdbcType=INTEGER},
      </if>
      <if test="inblackhomeX != null" >
        inBlackHome_X = #{inblackhomeX,jdbcType=INTEGER},
      </if>
      <if test="inblackhomeY != null" >
        inBlackHome_Y = #{inblackhomeY,jdbcType=INTEGER},
      </if>
      <if test="inredhomeX != null" >
        inRedHome_X = #{inredhomeX,jdbcType=INTEGER},
      </if>
      <if test="inredhomeY != null" >
        inRedHome_Y = #{inredhomeY,jdbcType=INTEGER},
      </if>
      <if test="movetoX != null" >
        moveTo_X = #{movetoX,jdbcType=INTEGER},
      </if>
      <if test="movetoY != null" >
        moveTo_Y = #{movetoY,jdbcType=INTEGER},
      </if>
      <if test="notexistblackX != null" >
        notExistBlack_X = #{notexistblackX,jdbcType=INTEGER},
      </if>
      <if test="notexistblackY != null" >
        notExistBlack_Y = #{notexistblackY,jdbcType=INTEGER},
      </if>
      <if test="notexistredX != null" >
        notExistRed_X = #{notexistredX,jdbcType=INTEGER},
      </if>
      <if test="notexistredY != null" >
        notExistRed_Y = #{notexistredY,jdbcType=INTEGER},
      </if>
      <if test="notfacetofaceX != null" >
        notFaceToFace_X = #{notfacetofaceX,jdbcType=INTEGER},
      </if>
      <if test="notfacetofaceY != null" >
        notFaceToFace_Y = #{notfacetofaceY,jdbcType=INTEGER},
      </if>
      <if test="facetoface != null" >
        faceToFace = #{facetoface,jdbcType=BIT},
      </if>
      <if test="eatanother != null" >
        eatAnother = #{eatanother,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.edu.cqu.kb.model.JRule" >
    update jrule
    set chessId = #{chessid,jdbcType=INTEGER},
      inBlackHome_X = #{inblackhomeX,jdbcType=INTEGER},
      inBlackHome_Y = #{inblackhomeY,jdbcType=INTEGER},
      inRedHome_X = #{inredhomeX,jdbcType=INTEGER},
      inRedHome_Y = #{inredhomeY,jdbcType=INTEGER},
      moveTo_X = #{movetoX,jdbcType=INTEGER},
      moveTo_Y = #{movetoY,jdbcType=INTEGER},
      notExistBlack_X = #{notexistblackX,jdbcType=INTEGER},
      notExistBlack_Y = #{notexistblackY,jdbcType=INTEGER},
      notExistRed_X = #{notexistredX,jdbcType=INTEGER},
      notExistRed_Y = #{notexistredY,jdbcType=INTEGER},
      notFaceToFace_X = #{notfacetofaceX,jdbcType=INTEGER},
      notFaceToFace_Y = #{notfacetofaceY,jdbcType=INTEGER},
      faceToFace = #{facetoface,jdbcType=BIT},
      eatAnother = #{eatanother,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.edu.cqu.kb.dao.BRuleMapper">
	<resultMap id="BaseResultMap" type="cn.edu.cqu.kb.model.BRule">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="chessId" property="chessid" jdbcType="INTEGER" />
		<result column="inBlack_X" property="inblackX" jdbcType="INTEGER" />
		<result column="inBlack_Y" property="inblackY" jdbcType="INTEGER" />
		<result column="inRed_X" property="inredX" jdbcType="INTEGER" />
		<result column="inRed_Y" property="inredY" jdbcType="INTEGER" />
		<result column="existBlack_X" property="existblackX" jdbcType="INTEGER" />
		<result column="existBlack_Y" property="existblackY" jdbcType="INTEGER" />
		<result column="existRed_X" property="existredX" jdbcType="INTEGER" />
		<result column="existRed_Y" property="existredY" jdbcType="INTEGER" />
		<result column="notExistRed_X" property="notexistredX"
			jdbcType="INTEGER" />
		<result column="notExistRed_Y" property="notexistredY"
			jdbcType="INTEGER" />
		<result column="notExistBlack_X" property="notexistblackX"
			jdbcType="INTEGER" />
		<result column="notExistBlack_Y" property="notexistblackY"
			jdbcType="INTEGER" />
		<result column="moveTo_X" property="movetoX" jdbcType="INTEGER" />
		<result column="moveTo_Y" property="movetoY" jdbcType="INTEGER" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, chessId, inBlack_X, inBlack_Y, inRed_X, inRed_Y, existBlack_X,
		existBlack_Y,
		existRed_X, existRed_Y, notExistRed_X, notExistRed_Y, notExistBlack_X,
		notExistBlack_Y,
		moveTo_X, moveTo_Y
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="cn.edu.cqu.kb.model.BRuleExample">
		select
		<if test="distinct">
			distinct
		</if>
		'true' as QUERYID,
		<include refid="Base_Column_List" />
		from brule
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from brule
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from brule
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="cn.edu.cqu.kb.model.BRule">
		insert into brule (id, chessId, inBlack_X,
		inBlack_Y, inRed_X, inRed_Y,
		existBlack_X, existBlack_Y, existRed_X,
		existRed_Y, notExistRed_X, notExistRed_Y,
		notExistBlack_X, notExistBlack_Y, moveTo_X,
		moveTo_Y)
		values (#{id,jdbcType=INTEGER}, #{chessid,jdbcType=INTEGER},
		#{inblackX,jdbcType=INTEGER},
		#{inblackY,jdbcType=INTEGER}, #{inredX,jdbcType=INTEGER}, #{inredY,jdbcType=INTEGER},
		#{existblackX,jdbcType=INTEGER}, #{existblackY,jdbcType=INTEGER},
		#{existredX,jdbcType=INTEGER},
		#{existredY,jdbcType=INTEGER}, #{notexistredX,jdbcType=INTEGER}, #{notexistredY,jdbcType=INTEGER},
		#{notexistblackX,jdbcType=INTEGER},
		#{notexistblackY,jdbcType=INTEGER}, #{movetoX,jdbcType=INTEGER},
		#{movetoY,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective" parameterType="cn.edu.cqu.kb.model.BRule">
		insert into brule
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="chessid != null">
				chessId,
			</if>
			<if test="inblackX != null">
				inBlack_X,
			</if>
			<if test="inblackY != null">
				inBlack_Y,
			</if>
			<if test="inredX != null">
				inRed_X,
			</if>
			<if test="inredY != null">
				inRed_Y,
			</if>
			<if test="existblackX != null">
				existBlack_X,
			</if>
			<if test="existblackY != null">
				existBlack_Y,
			</if>
			<if test="existredX != null">
				existRed_X,
			</if>
			<if test="existredY != null">
				existRed_Y,
			</if>
			<if test="notexistredX != null">
				notExistRed_X,
			</if>
			<if test="notexistredY != null">
				notExistRed_Y,
			</if>
			<if test="notexistblackX != null">
				notExistBlack_X,
			</if>
			<if test="notexistblackY != null">
				notExistBlack_Y,
			</if>
			<if test="movetoX != null">
				moveTo_X,
			</if>
			<if test="movetoY != null">
				moveTo_Y,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="chessid != null">
				#{chessid,jdbcType=INTEGER},
			</if>
			<if test="inblackX != null">
				#{inblackX,jdbcType=INTEGER},
			</if>
			<if test="inblackY != null">
				#{inblackY,jdbcType=INTEGER},
			</if>
			<if test="inredX != null">
				#{inredX,jdbcType=INTEGER},
			</if>
			<if test="inredY != null">
				#{inredY,jdbcType=INTEGER},
			</if>
			<if test="existblackX != null">
				#{existblackX,jdbcType=INTEGER},
			</if>
			<if test="existblackY != null">
				#{existblackY,jdbcType=INTEGER},
			</if>
			<if test="existredX != null">
				#{existredX,jdbcType=INTEGER},
			</if>
			<if test="existredY != null">
				#{existredY,jdbcType=INTEGER},
			</if>
			<if test="notexistredX != null">
				#{notexistredX,jdbcType=INTEGER},
			</if>
			<if test="notexistredY != null">
				#{notexistredY,jdbcType=INTEGER},
			</if>
			<if test="notexistblackX != null">
				#{notexistblackX,jdbcType=INTEGER},
			</if>
			<if test="notexistblackY != null">
				#{notexistblackY,jdbcType=INTEGER},
			</if>
			<if test="movetoX != null">
				#{movetoX,jdbcType=INTEGER},
			</if>
			<if test="movetoY != null">
				#{movetoY,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="cn.edu.cqu.kb.model.BRule">
		update brule
		<set>
			<if test="chessid != null">
				chessId = #{chessid,jdbcType=INTEGER},
			</if>
			<if test="inblackX != null">
				inBlack_X = #{inblackX,jdbcType=INTEGER},
			</if>
			<if test="inblackY != null">
				inBlack_Y = #{inblackY,jdbcType=INTEGER},
			</if>
			<if test="inredX != null">
				inRed_X = #{inredX,jdbcType=INTEGER},
			</if>
			<if test="inredY != null">
				inRed_Y = #{inredY,jdbcType=INTEGER},
			</if>
			<if test="existblackX != null">
				existBlack_X = #{existblackX,jdbcType=INTEGER},
			</if>
			<if test="existblackY != null">
				existBlack_Y = #{existblackY,jdbcType=INTEGER},
			</if>
			<if test="existredX != null">
				existRed_X = #{existredX,jdbcType=INTEGER},
			</if>
			<if test="existredY != null">
				existRed_Y = #{existredY,jdbcType=INTEGER},
			</if>
			<if test="notexistredX != null">
				notExistRed_X = #{notexistredX,jdbcType=INTEGER},
			</if>
			<if test="notexistredY != null">
				notExistRed_Y = #{notexistredY,jdbcType=INTEGER},
			</if>
			<if test="notexistblackX != null">
				notExistBlack_X = #{notexistblackX,jdbcType=INTEGER},
			</if>
			<if test="notexistblackY != null">
				notExistBlack_Y = #{notexistblackY,jdbcType=INTEGER},
			</if>
			<if test="movetoX != null">
				moveTo_X = #{movetoX,jdbcType=INTEGER},
			</if>
			<if test="movetoY != null">
				moveTo_Y = #{movetoY,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="cn.edu.cqu.kb.model.BRule">
		update brule
		set chessId = #{chessid,jdbcType=INTEGER},
		inBlack_X = #{inblackX,jdbcType=INTEGER},
		inBlack_Y = #{inblackY,jdbcType=INTEGER},
		inRed_X = #{inredX,jdbcType=INTEGER},
		inRed_Y = #{inredY,jdbcType=INTEGER},
		existBlack_X = #{existblackX,jdbcType=INTEGER},
		existBlack_Y = #{existblackY,jdbcType=INTEGER},
		existRed_X = #{existredX,jdbcType=INTEGER},
		existRed_Y = #{existredY,jdbcType=INTEGER},
		notExistRed_X = #{notexistredX,jdbcType=INTEGER},
		notExistRed_Y = #{notexistredY,jdbcType=INTEGER},
		notExistBlack_X = #{notexistblackX,jdbcType=INTEGER},
		notExistBlack_Y = #{notexistblackY,jdbcType=INTEGER},
		moveTo_X = #{movetoX,jdbcType=INTEGER},
		moveTo_Y = #{movetoY,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
	</update>
</mapper>